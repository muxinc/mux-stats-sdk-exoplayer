apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.mux.gradle.android.mux-android-distribution'

checkstyle {
  configFile = file("${rootDir}/.checkstyle/checkstyle.xml")
  configDirectory = file("${rootDir}/.checkstyle")
  toolVersion '8.42'
}

task checkstyle(type: Checkstyle) {
  source 'src'
  include '**/*.java'
  exclude '**/gen/**'

  // empty classpath
  classpath = files()
  showViolations = true
  ignoreFailures = false
}

preBuild.dependsOn('checkstyle')
assemble.dependsOn('lint')
check.dependsOn('checkstyle')

android {
  compileSdkVersion project.ext.compileSdkVersion
  defaultConfig {
    minSdkVersion project.ext.minSdkVersion
    targetSdkVersion project.ext.targetSdkVersion
    multiDexEnabled true
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    buildConfigField("String", "MUX_PLUGIN_NAME", "\"android-exoplayer-mux\"")
  }


  buildTypes {
    // Due to fun with fat-aar we must switch on build type
    // This is because fat-aar is confused by multiple flavor dimensions
    // For consuming libraries this is not a problem and they can support
    // independent debug/release switching

    debug {
      // Note this is NOT a fat aar
      minifyEnabled false
    }

    release {
      // Note this is a fat aar (see dependencies for MuxCore inclusion)
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    disable 'GradleCompatible'
    // exoplayer 2.8.1 workaround
    // https://github.com/google/ExoPlayer/issues/4234
    lintConfig file("../checker-framework-lint.xml")
  }

  flavorDimensions 'exoplayer'

  productFlavors {
    r2_9_6 {
      dimension 'exoplayer'
      matchingFallbacks = ['upto2_10']
    }
    r2_10_6 {
      dimension 'exoplayer'
      matchingFallbacks = ['upto2_10']
    }
    r2_11_1 {
      dimension 'exoplayer'
      matchingFallbacks = ['just2_11']
    }
    r2_12_1 {
      dimension 'exoplayer'
      matchingFallbacks = ['from2_12to2_13']
    }
    r2_13_1 {
      dimension 'exoplayer'
      matchingFallbacks = ['from2_12to2_13']
    }
    r2_14_1 {
      dimension 'exoplayer'
      matchingFallbacks = ['just2_14']
    }
    r2_15_1 {
      dimension 'exoplayer'
      matchingFallbacks = ['just2_15']
    }
    r2_16_1 {
      dimension 'exoplayer'
      matchingFallbacks = ['just2_16']
    }
    amznPort {
      dimension 'exoplayer'
      matchingFallbacks = ['just_2_16']
    }
    r2_17_1 {
      dimension 'exoplayer'
      matchingFallbacks = ['just2_17']
    }
    r2_18_1 {
      dimension 'exoplayer'
      matchingFallbacks = ['from2_18toNow']
    }
  } //productFlavors

  sourceSets {
    r2_14_1 {
      java.srcDirs += 'src/r2_15/java'
    }
    r2_15_1 {
      java.srcDirs += 'src/r2_15/java'
    }
    r2_16_1 {
      java.srcDirs += 'src/r2_17/java'
    }
    r2_17_1 {
      java.srcDirs += 'src/r2_17/java'
    }
    r2_18_1 {
      java.srcDirs += 'src/r2_18/java'
    }
  }

  compileOptions {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = '1.8'
  }
} //android

muxDistribution {
  def buildKite = System.getenv("BUILDKITE_BRANCH") != null
  if (buildKite) {
    devVersion versionFromCommitHash('dev-', System.getenv("BUILDKITE_BRANCH"))
  } else {
    devVersion versionFromCommitHash('dev-')
  }
  releaseVersion versionFromHeadCommit()
  artifactIds artifactFromFlavorValue('exoplayer')
  groupIds just("com.mux.stats.sdk.muxstats")

  publishIf { !it.productFlavors*.name.contains("ads") && it.buildType.name.contains("release") }
  useArtifactory = true
}

dependencies {
  //noinspection GradleDynamicVersion,GradleDependency
  r2_9_6Implementation 'com.google.android.exoplayer:exoplayer:2.9.6'
  //noinspection GradleDynamicVersion,GradleDependency
  r2_10_6Implementation 'com.google.android.exoplayer:exoplayer:2.10.6'
  //noinspection GradleDynamicVersion,GradleDependency
  r2_11_1Implementation 'com.google.android.exoplayer:exoplayer:2.11.1'
  //noinspection GradleDynamicVersion,GradleDependency
  r2_12_1Implementation 'com.google.android.exoplayer:exoplayer:2.12.1'
  //noinspection GradleDynamicVersion,GradleDependency
  r2_13_1Implementation 'com.google.android.exoplayer:exoplayer:2.13.1'
  //noinspection GradleDynamicVersion,GradleDependency
  r2_14_1Implementation 'com.google.android.exoplayer:exoplayer:2.14.1'
  //noinspection GradleDynamicVersion,GradleDependency
  r2_15_1Implementation 'com.google.android.exoplayer:exoplayer:2.15.1'
  //noinspection GradleDynamicVersion,GradleDependency
  r2_16_1Implementation 'com.google.android.exoplayer:exoplayer:2.16.1'
  // Amazon's port doesn't delete any symbols (ever), so we only need one version
  //noinspection GradleDynamicVersion,GradleDependency
  amznPortImplementation "com.amazon.android:exoplayer:2.16.1"
  //noinspection GradleDynamicVersion,GradleDependency
  r2_17_1Implementation 'com.google.android.exoplayer:exoplayer:2.17.1'
  r2_18_1Implementation 'com.google.android.exoplayer:exoplayer:2.18.1'

  //noinspection GradleDynamicVersion,GradleDependency
//  compileOnly 'com.google.ads.interactivemedia.v3:interactivemedia:3.9.0'
  implementation 'com.google.ads.interactivemedia.v3:interactivemedia:3.28.1'
  //noinspection GradleDynamicVersion,GradleDependency
  compileOnly 'com.google.android.gms:play-services-ads:15.0.1'
  //noinspection GradleDynamicVersion,GradleDependency
  compileOnly 'com.google.android.gms:play-services-ads-identifier:15.0.1'

  debugImplementation project(':ExoPlayerAdapter')
  api "com.mux:stats.muxcore:${project.ext.muxCoreVersion}"
}

afterEvaluate {
  // Add dependency on ExoPlayerAdapter lib via mvn, which is also variant-aware
  //  We only want to add this to release builds, and it has to be the same variant to work.
  //  There's r2_18_1Api '..' and releaseApi '..', but no r2_18_1ReleaseApi '..'
  android.libraryVariants.findAll { it.buildType.name.contains("release") }
          .each { variant ->
            def depNotation =
                    "com.mux.stats.sdk.muxstats" +
                            ":ExoPlayerAdapter_${variant.productFlavors.get(0).name}" +
                            ":${project.version}"
            project.dependencies.add(variant.runtimeConfiguration.getName(), depNotation)
            project.dependencies.add(variant.compileConfiguration.getName(), depNotation)
          }
}
