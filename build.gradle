// Copyright (C) 2016 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.1'
        classpath 'com.novoda:bintray-release:0.9.1'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

allprojects {
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'maven-publish'
    repositories {
        google()
        jcenter()
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    project.ext {
        versionName = "2.4.11"
        minSdkVersion=16
        compileSdkVersion=30
        targetSdkVersion=30
        releaseRepoName = 'exoplayer'
        releaseUserOrg = 'google'
        releaseGroupId = 'com.google.android.exoplayer'
        releaseVersion = 'r2.1.1'
        releaseWebsite = 'https://github.com/google/ExoPlayer'
    }
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

afterEvaluate {
    project('MuxExoPlayer') {
//        artifactoryPublish.dependsOn('build')
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId = "com.mux.stats.sdk.muxstats"

                    def outDirTree = fileTree(dir: "${buildDir}/outputs/artifacts/", exclude: ['**/*.txt'])
                    outDirTree.visit { fileDetails ->
                        def versionName = fileDetails.name.replaceAll("mux-", "").replaceAll(".aar", "")
                        println "=== Publishing >>>>> ${fileDetails.name}, version: ${versionName}"

                        artifact("${buildDir}/outputs/artifacts/${fileDetails.name}") {
                            classifier versionName
                            version = project.ext.versionName
                        }
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'default-maven-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications ('mavenJava')
        }
    }
    resolve {
        repository {
            repoKey = 'default-maven-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

task muxReleaseDeploy {
    doLast {
//        if(isAReleaseBuild) {
            println("Deploying from local maven to release maven")

            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'curl', '-u', ${artifactory_user} + ":" + ${artifactory_password}, '-X', "POST", "https://muxinc.jfrog.io/artifactory/api/copy/mux-stats-sdk-gradle-dev-local/com/mux/stats/sdk/muxstats/MuxExoPlayer/" + project.ext.versionName + "?to=/default-maven-release-local/com/mux/stats/sdk/muxstats/MuxExoPlayer/" + project.ext.versionName
                standardOutput = stdout
            }
            def msg = stdout.toString()
            println(msg)

            println("Release deployment complete")
//        }
    }
}